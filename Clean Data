# Making Graph to Visualize No of Books Per Author
# This section of the code defines a function author_graph() that creates a horizontal bar graph showing the number of books per author. It prompts the user to enter a range (lower and higher limits) to visualize a subset of the data. The graph is generated using the matplotlib library.


def author_graph():
    print("It's a huge dataset. Enter a range (lower and higher limits, e.g., 10, 20) to visualize a subset of the data. Maximum 20 records can be visualized at a time.")
    limit1 = int(input("Enter the lower limit: "))
    limit2 = int(input("Enter the higher limit: "))
    if limit2 - limit1 > 20:
        raise Exception("Max 20 records at a time are allowed!")
        return
    y = df_book.pivot_table(index=['Author'], aggfunc='size').to_frame()
    y_lim = y.iloc[limit1:limit2]
    y_lim = y_lim.squeeze()
    y_lim.plot.barh()
    plt.title("Horizontal Bar Graph Showing No Of Books Per Author")
    plt.xlabel("No of books")
    plt.ylabel("Author Name")
    plt.show()



# Making Graph to Visualize No of Books Per City
#This section of the code defines a function book_place_graph() that creates a horizontal bar graph showing the number of books per city (Place of Publication). Similar to the previous section, it prompts the user to enter a range to visualize a subset of the data.

def book_place_graph():
    print("It's a huge dataset. Enter a range (lower and higher limits, e.g., 10, 20) to visualize a subset of the data. Maximum 20 records can be visualized at a time.")
    limit1 = int(input("Enter the lower limit: "))
    limit2 = int(input("Enter the higher limit: "))
    if limit2 - limit1 > 20:
        raise Exception("Max 20 records at a time are allowed!")
        return
    y = df_book.pivot_table(index=['Place of Publication'], aggfunc='size').to_frame()
    y_lim = y.iloc[limit1:limit2]
    y_lim = y_lim.squeeze()
    y_lim.plot.barh()
    plt.title("Horizontal Bar Graph Showing No Of Books Per City")
    plt.xlabel("No of books")
    plt.ylabel("Publishing City")
    plt.show()


# Function to Handle User Choice and Visualize Data
# This section of the code defines a function visualize_choice() that takes user input to choose what graph to show. It then calls the corresponding function based on the user's choice. The user is given options to visualize a graph over publication years, the number of books per author, the number of books per city, or exit the program.
def visualize_choice():
    choice = int(input("\n1: Graph Over Publication Year\n2: Number of books per author\n3: No of books per city\n4: Exit Program\nEnter Your Choice:"))
    if not isinstance(choice, int) and choice not in [1, 2, 3, 4]:
         raise Exception("Enter a number between 1-4!")
         return
    if choice == 4:
        exit()
    print("It may take time to draw the graph, please be patient!\nPlease close before you provide new input for drawing a new graph\n")
    if choice == 1:
        pub_date_graph()
    elif choice == 2:
        author_graph()
    elif choice == 3:
        book_place_graph()
    else:
        raise Exception("Input Error!")

# Main Loop for Continuous User Interaction
#The main loop of the program continuously prompts the user for choices and calls the visualize_choice() function accordingly. The user can choose to visualize different graphs, and the program will keep running until the user decides to exit.
# Main loop for continuous user interaction
while True:
    visualize_choice()

# These sections enhance the functionality of the program by providing options for the user to visualize specific graphs and interact with the data.
